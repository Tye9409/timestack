// Generated by CoffeeScript 1.6.3
/*
Timestack
http://icambron.github.com/timestack
Copyright 2012 Isaac Cambron
Released under the MIT license, license here: https://github.com/icambron/timestack/blob/master/Readme.markdown
*/


(function() {
  (function(jQuery) {
    var $;
    $ = jQuery;
    return $.fn.extend({
      timestack: function(options) {
        var between, defaults;
        defaults = {
          click: null,
          parse: function(s) {
            return moment(s);
          },
          renderDates: function(item) {
            var dateFormat, endFormated, startFormated;
            dateFormat = this.dateFormats[options.span];
            startFormated = item.start.format(dateFormat);
            endFormated = item.tilNow ? '' : item.end.format(dateFormat);
            return this.formatRange(startFormated, endFormated);
          },
          formatRange: function(startStr, endStr) {
            return "" + startStr + " - " + endStr;
          },
          span: 'year',
          dateFormats: {
            year: 'MMM YYYY',
            month: 'MMM DD',
            day: 'MMM DD',
            hour: 'h:mm a'
          },
          intervalFormats: {
            year: 'YYYY',
            month: 'MMM YYYY',
            day: 'MMM DD',
            hour: 'h:mm a'
          }
        };
        options = $.extend(defaults, options);
        if (!(['year', 'month', 'day', 'hour'].indexOf(options.span) > -1)) {
          throw "" + options.span + " is not a valid span option";
        }
        between = function(start, end) {
          var index, results;
          results = [];
          index = start.clone().startOf(options.span);
          while (index < end) {
            results.push(index.clone());
            index.add(options.span + 's', 1);
          }
          return results;
        };
        return this.each(function() {
          var $intervals, $li, $obj, $ul, date, dates, diff, earliest, format, i, items, labelspan, latest, offset, timespan, titlespan, width, _i, _j, _len, _len1;
          $obj = $(this);
          $ul = $obj.children('ul');
          $ul.css('width', options.width).addClass('timestack-events');
          earliest = null;
          latest = null;
          items = $ul.children('li').map(function() {
            var $li, endStr, i;
            $li = $(this);
            endStr = $li.attr('data-end');
            i = {
              tilNow: !endStr,
              start: options.parse($li.attr('data-start')),
              end: options.parse(endStr),
              title: $li.contents().filter(function() {
                return this.nodeType === 3;
              }).remove().text(),
              color: $li.attr('data-color'),
              li: $li
            };
            if (!(i.start <= i.end)) {
              throw 'Start times must be before end times';
            }
            if (!(earliest && earliest < i.start)) {
              earliest = i.start.clone();
            }
            if (!(latest && latest > i.end)) {
              latest = i.end.clone();
            }
            return i;
          });
          earliest.startOf(options.span);
          if (latest.valueOf() !== latest.clone().startOf(options.span).valueOf()) {
            latest.endOf(options.span);
          }
          diff = latest - earliest;
          for (_i = 0, _len = items.length; _i < _len; _i++) {
            i = items[_i];
            $li = i.li;
            i.timeDisplay = options.renderDates(i);
            timespan = $("<em>(" + i.timeDisplay + ")</em>").addClass('timestack-time');
            titlespan = $("<span>" + i.title + " </span>").addClass("timestack-title");
            labelspan = $("<span></span>").addClass('timestack-label').append(titlespan).append(timespan);
            i.content = $li.children().wrapAll("<div class='timestack-content'></div>").parent().hide().children();
            width = ((i.end - i.start) / diff * 100).toFixed(2);
            offset = ((i.start - earliest) / diff * 100).toFixed(2);
            $li.prepend(labelspan).css("margin-left", "" + offset + "%").css("width", "" + width + "%").click((function(i) {
              return function() {
                return options.click(i);
              };
            })(i));
            if (i.color) {
              $li.css('background-color', i.color);
            }
            if (options.click) {
              $li.css('cursor', 'pointer');
            }
          }
          dates = between(earliest, latest);
          width = (100 / dates.length).toFixed(2) + "%";
          format = options.intervalFormats[options.span];
          $intervals = $("<ul></ul>").addClass("intervals");
          for (_j = 0, _len1 = dates.length; _j < _len1; _j++) {
            date = dates[_j];
            $("<li></li>").text(date.format(format)).css('width', width).appendTo($intervals);
          }
          return $obj.append($intervals);
        });
      }
    });
  })(jQuery);

}).call(this);
